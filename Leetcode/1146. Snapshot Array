/* 1146. Snapshot Array

Implement a SnapshotArray that supports the following interface:

SnapshotArray(int length) initializes an array-like data structure with the given length. Initially, each element equals 0.
void set(index, val) sets the element at the given index to be equal to val.
int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id
 

Example 1:

Input: ["SnapshotArray","set","snap","set","get"]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5
 

Constraints:

1 <= length <= 5 * 104
0 <= index < length
0 <= val <= 109
0 <= snap_id < (the total number of times we call snap())
At most 5 * 104 calls will be made to set, snap, and get. */

/*Creating multiple aarays gives Memory limit exceed, so, we are using 2 index, 1 for snap_id and 1 for index of the array
Every time snap is getting called new blank hashmap is inserted
So at the end, when we try to find for given Snap_id, we iterate from given snap_id to below snap_id where we would get the index available
That is the answer
Follow Up: Using TreeMap */

class SnapshotArray {
    ArrayList<HashMap<Integer,Integer>> SnapshotArrayList;
    int maxSnap=0;

    public SnapshotArray(int length) {
        SnapshotArrayList = new ArrayList();
        SnapshotArrayList.add(new HashMap());     
    }
    
    public void set(int index, int val) {
        SnapshotArrayList.get(maxSnap).put(index,val);
    }
    
    public int snap() {
        SnapshotArrayList.add(new HashMap());
        return maxSnap++;
    }
    
    public int get(int index, int snap_id) {
        for(int i=snap_id;i>=0;i--)
        {
            if(SnapshotArrayList.get(i).containsKey(index))
                return SnapshotArrayList.get(i).get(index);
        }
        return 0;
    }
}

/**
 * Your SnapshotArray object will be instantiated and called as such:
 * SnapshotArray obj = new SnapshotArray(length);
 * obj.set(index,val);
 * int param_2 = obj.snap();
 * int param_3 = obj.get(index,snap_id);
 */
